#!/usr/bin/env bash

edit_file() {
	previous_file="$1"
	file_to_edit=`select_file $previous_file`

	if [ -n "$file_to_edit" ] ; then
		"$EDITOR" "$file_to_edit"
		edit_file "$file_to_edit"
	fi
}

select_file() {
	given_file="$1"
	fzf --preview="cat {}" --preview-window=right:70%:wrap --query="$given_file"
}

nn() {
	local note_name="$*"
	local note_date="`date +%F`"
	local note_ext="md"
	if [[ $note_name == "" ]]; then
		note_name="$note_date.$note_ext"
	else
		note_name="$note_name.$note_ext"
	fi
	mkdir -p $ATLAS_NOTES_DIR
	vim "$ATLAS_NOTES_DIR/$note_name"
}

ns() {
  local file
  [ -z "$1" ] && echo "No argument supplied - Enter a term to search" && return 1
  file="$(rg --files-with-matches --no-ignore --ignore-case --hidden --no-heading --no-messages $1 $ATLAS_NOTES_DIR | fzf --preview "head -100 {}")"
  if [[ -n $file ]]
  then
    vim $file
  fi
}

nl() {
  local files
  files="$(rg --files $ATLAS_NOTES_DIR | fzf --preview "head -100 {}")"
  if [[ -n $files ]]; then
    vim $files
  fi
}

# Create a new directory and enter it
mkd() {
	mkdir -p "$@" && cd "$_";
}

# Determine size of a file or total size of a directory
fs() {
	if du -b /dev/null > /dev/null 2>&1; then
		local arg=-sbh;
	else
		local arg=-sh;
	fi
	if [[ -n "$@" ]]; then
		du $arg -- "$@";
	else
		du $arg .[^.]* ./*;
	fi;
}

# Create a data URL from a file
dataurl() {
	local mimeType=$(file -b --mime-type "$1");
	if [[ $mimeType == text/* ]]; then
		mimeType="${mimeType};charset=utf-8";
	fi
	echo "data:${mimeType};base64,$(openssl base64 -in "$1" | tr -d '\n')";
}

# `v` with no arguments opens the current directory in Neovim, otherwise opens the
# given location
v() {
	if [ $# -eq 0 ]; then
		$EDITOR;
	else
		$EDITOR "$@";
	fi;
}

# `o` with no arguments opens the current directory, otherwise opens the given
# location
o() {
	if [ $# -eq 0 ]; then
		open .;
	else
		open "$@";
	fi;
}

# `tre` is a shorthand for `tree` with hidden files and color enabled, ignoring
# the `.git` directory, listing directories first. The output gets piped into
# `less` with options to preserve color and line numbers, unless the output is
# small enough for one screen.
tre() {
	tree -aC -I '.git|node_modules|bower_components' --dirsfirst "$@" | less -FRNX;
}

# Copy website and its contents
copy_website () {
	wget -e robots=off -p -k "$1"
}

# Extract most know archives with one command
extract () {
if [ -f $1 ]; then
	case $1 in
		*.tar.bz2)	tar xjf $1;;
		*.tar.gz)	tar xzf $1;;
		*.bz2)		bunzip2 $1;;
		*.rar)		unrar e $1;;
		*.gz)		gunzip $1;;
		*.tar)		tar xf $1;;
		*.tbz2)		tar xjf $1;;
		*.tgz)		tar xzf $1;;
		*.zip)		unzip $1;;
		*.Z)		uncompress $1;;
		*.7z)		7z x $1;;
		*)			echo "'$1' cannot be extracted via extract()" ;;
	esac
else
	echo "'$1' is not a valid file"
fi
}

mdless() {
	pandoc -s -f markdown -t man $1 | groff -T utf8 -man | less
}

umedit() {
	mkdir -p ${ATLAS_DEV_DIR}; vim ${ATLAS_DEV_DIR}/$1;
}

um() { mdless ${ATLAS_DEV_DIR}"$1"; }

umls() { ls ${ATLAS_DEV_DIR} }

banner() {
	figlet -f banner "$1" | sed -e "s/#/:${2}:/g" | sed -e 's/ /:blank:/g' | pbcopy
}

webpage_to_org() {
	if [[ -z $1 ]]; then
		echo "must provide a website"
		return 1
	fi
	if [[ -z $2 ]]; then
		echo "must provide a output filename (without extension)"
		return 1
	fi
	curl -sL ${1} | pandoc -o ${2}.org --from=html --to=org
}


##########
# TMUX
##########

unbool() {
	tmux kill-server
}

bool() {
	local SESSION_NAME="Bool"
	tmux has-session -t $SESSION_NAME 2>/dev/null

	if [[ $? != 0 ]]; then
		# Start New Session with our name
		tmux new-session -t "$SESSION_NAME" -d

		# Name first Window and start zsh
		tmux rename-window -t 1 '✪'

		# Create and setup pane for work
		WINDOW_WORK='♢'
		tmux new-window -t "$SESSION_NAME":2 -n "$WINDOW_WORK"
		tmux send-keys -t "$WINDOW_WORK" "cd ~/projects/ifit" C-m
		# Create and setup pane for work
		WINDOW_WORK2='♧'
		tmux new-window -t "$SESSION_NAME":3 -n "$WINDOW_WORK2"
		tmux send-keys -t "$WINDOW_WORK2" "cd ~/projects/ifit" C-m

		# Create and setup pane for projects
		WINDOW_PROJECTS='☃︎'
		tmux new-window -t "$SESSION_NAME":4 -n "$WINDOW_PROJECTS"
		tmux send-keys -t "$WINDOW_PROJECTS" "cd ~/projects" C-m

		# Create and setup pane for projects
		WINDOW_PROJECTS2='❖'
		tmux new-window -t "$SESSION_NAME":5 -n "$WINDOW_PROJECTS2"
		tmux send-keys -t "$WINDOW_PROJECTS2" "cd ~/projects" C-m
	fi

	# Attach Session, on the Main window
	tmux a -t "$SESSION_NAME"
}

##########
# FFMPEG
##########

convert_aiffs() {
	for i in *.aiff;
		do convert_aiff $i;
	done
}

convert_aiff() {
	ffmpeg -y -i "$1" -c:a libvorbis -q:a 4 "_$1.ogg";
}

convert_gifs() {
	for i in *.gif;
		do convert_gif $i;
	done
}

convert_gif() {
	ffmpeg -f gif -i "$1" -movflags faststart -pix_fmt yuv420p -vf "scale=trunc(iw/2)*2:trunc(ih/2)*2" "_${1.*}.mp4";
}

convert_webm() {
	ffmpeg -fflags +genpts -i "$1" -r 24 "scale=trunc(iw/2)*2:trunc(ih/2)*2" "_${1.*}.mp4"
}

##########
# Utilities
##########

checkNVM() {
     if [[ -f .nvmrc  ]] ; then
         A=$(cat .nvmrc)
         A="v$A"
         B=$(fnm current 2>&1)
         # only get B equal to length of A
         B=${B:0:${#A}}
         if [[ $A != $B  ]] ; then echo "fnm use $A" && fnm use > /dev/null ; fi;
    fi;
}

checkNVM

cd() {
     builtin cd $@ ; checkNVM
}

colortest() {
	awk 'BEGIN{
		s="/\\/\\/\\/\\/\\"; s=s s s s s s s s s s s s s s s s s s s s s s s;
		for (colnum = 0; colnum<256; colnum++) {
			r = 255-(colnum*255/255);
			g = (colnum*510/255);
			b = (colnum*255/255);
			if (g>255) g = 510-g;
			printf "\033[48;2;%d;%d;%dm", r,g,b;
			printf "\033[38;2;%d;%d;%dm", 255-r,255-g,255-b;
			printf "%s\033[0m", substr(s,colnum+1,1);
		}
		printf "\n";
	}'
}

dump_ifit_mongo() {
    docker exec mongodb ~/.atlas/scripts/dump-mongo
}

rename_files() {
	local old=$1
	local new=$2
	find . -name "*.$old" -exec bash -c 'mv "$1" "${1%.$old}".$new' - '{}' +
}

confirm() {
    # call with a prompt string or use a default
    read -r -p "${1:-Are you sure? [y/N]} " response
    case "$response" in
        [yY][eE][sS]|[yY])
            true
            ;;
        *)
            false
            ;;
    esac
}

##########
# Git
##########

# get default branch name (branch you should branch from for new work)
gdefault() {
	command git branch -rl '*/HEAD' | rev | cut -d/ -f1 | rev
}

# publish local branch
gpub() {
	command git push --set-upstream origin $(git_current_branch)
}

gcr() {
	command git checkout -t origin/"${@}"
}

# Clean up local branches that have been merged
function gclean() {
	branch=$1
	if [[ -z "$branch" ]] then
		branch=$(gdefault)
	fi
	confirm "Are you on a clean branch?" &&
	command git checkout "$branch" &&
	command git branch -d $(command git branch --merged="$branch" | grep -v "$branch") &&
	command git fetch --prune
}


tag() {
    command git checkout master
    command git pull origin master
    command git fetch --tags
    command git tag -a "$1" -m "Release $1"
    command git push origin "$1" --tag
}

icebreaker() {
	node "$ATLAS_ROOT/scripts/icebreaker.js"
}
