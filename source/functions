#!/usr/bin/env bash

ID_COLOUR="\033[36m"
TEXT_COLOUR="\033[34m"
STATUS_COLOUR="\033[33m"
SHELL_COLOUR="\033[0m"
# Set to the directory you typically clone your git repos
CODE_DIR="$HOME/src"

# make a note in the notes directory
nn() {
  local note_name="$*"
  local note_date="`date +%F`"
  local note_ext="md"
  if [[ $note_name == "" ]]; then
    note_name="$note_date.$note_ext"
  else
    note_name="$note_name.$note_ext"
  fi
  mkdir -p $ATLAS_NOTES_DIR
  v "$ATLAS_NOTES_DIR/$note_name"
}

# search note contents for a term
ns() {
  local DIR="$ATLAS_NOTES_DIR"
  local RG_PREFIX="rg --column --line-number --no-heading --color=always --smart-case -tmd "
  local INITIAL_QUERY="${*:-}"
  : | fzf --ansi --disabled --query "$INITIAL_QUERY" \
    --bind "start:reload:$RG_PREFIX {q} '$DIR'" \
    --bind "change:reload:sleep 0.1; $RG_PREFIX {q} '$DIR' || true" \
    --delimiter : \
    --preview 'bat --color=always {1} --highlight-line {2}' \
    --preview-window 'right,60%,border-bottom,+{2}+3/3,~3' \
    --bind 'enter:become(nvim {1} +{2})'
}


# search note filenames
nl() {
  local files
  files="$(rg --files $ATLAS_NOTES_DIR | fzf --delimiter / --with-nth -1 --preview "head -100 {} ")"
  if [[ -n $files ]]; then
    v $files
  fi
}


alias rgf='rg --files | rg'

# search repos
rs() {
  local files="$(rg --files "$CODE_DIR" | fzf --delimiter / --with-nth -1 --preview 'bat --color=always {}')"
  if [[ -n $files ]]; then
    v $files
  fi

}

cs() {
  local DIR="$CODE_DIR"
  local RG_PREFIX="rg --files $DIR | rg --column --line-number --no-heading --color=always --smart-case -g '!*test.*' -g '!static/test/*' "
  local INITIAL_QUERY="${*:-}"
  : | fzf --ansi --disabled --query "$INITIAL_QUERY" \
    --bind "start:reload:$RG_PREFIX {q} $DIR" \
    --bind "change:reload:sleep 0.1; $RG_PREFIX {q} $DIR || true" \
    --delimiter : \
    --preview 'bat --color=always {1} --highlight-line {2}' \
    --bind 'enter:become(code {1} +{2})'
}

# Create a new directory and enter it
mkd() {
  mkdir -p "$@" && cd "$_";
}

# Determine size of a file or total size of a directory
fs() {
  if du -b /dev/null > /dev/null 2>&1; then
    local arg=-sbh;
  else
    local arg=-sh;
  fi
  if [[ -n "$@" ]]; then
    du $arg -- "$@";
  else
    du $arg .[^.]* ./*;
  fi;
}

# Create a data URL from a file (urlencoded string)
dataurl() {
  local mimeType=$(file -b --mime-type "$1");
  if [[ $mimeType == text/* ]]; then
    mimeType="${mimeType};charset=utf-8";
  fi
  echo "data:${mimeType};base64,$(openssl base64 -in "$1" | tr -d '\n')";
}

# `v` with no arguments opens the current directory in $EDITOR (neovim)
# otherwise opens the given location
v() {
  if [ $# -eq 0 ]; then
    $EDITOR;
  else
    $EDITOR "$@";
  fi;
}

# `tre` is a shorthand for `tree` with hidden files and color enabled, ignoring
# the `.git` directory, listing directories first. The output gets piped into
# `less` with options to preserve color and line numbers, unless the output is
# small enough for one screen.
tre() {
  tree -aC -I '.git|node_modules|bower_components' --dirsfirst "$@" | less -FRNX;
}

# Copy website and its contents
copy_website () {
  wget -e robots=off -p -k "$1"
}

# Extract most know archives with one command
extract () {
if [ -f $1 ]; then
  case $1 in
    *.tar.bz2)	tar xjf $1;;
    *.tar.gz)	tar xzf $1;;
    *.bz2)		bunzip2 $1;;
    *.rar)		unrar e $1;;
    *.gz)		gunzip $1;;
    *.tar)		tar xf $1;;
    *.tbz2)		tar xjf $1;;
    *.tgz)		tar xzf $1;;
    *.zip)		unzip $1;;
    *.Z)		uncompress $1;;
    *.7z)		7z x $1;;
    *)			echo "'$1' cannot be extracted via extract()" ;;
  esac
else
  echo "'$1' is not a valid file"
fi
}

# download a file from $1 and save it in a file $2
dl() {
  curl "$1" --output "~/Downloads/$2"
}

banner() {
  figlet -f banner "$1" | sed -e "s/#/:${2}:/g" | sed -e 's/ /:blank:/g' | pbcopy
}

unbool() {
  tmux kill-server
}

# Launch or reconnect main tmux session
bool() {
  local SESSION_NAME="Bool"
  tmux has-session -t $SESSION_NAME 2>/dev/null

  if [[ $? != 0 ]]; then
    # Start New Session with our name
    tmux new-session -t "$SESSION_NAME" -d

    # Name first Window and start zsh
    tmux rename-window -t 1 'üè°'

    local cmd="cd $CODE_DIR && clear"
    # Create and setup panes
    local two='üåÆ misc'
    tmux new-window -t "$SESSION_NAME":2 -n "$two"
    tmux send-keys -t "$two" "$cmd" C-m

    local three='üí£ scratch'
    tmux new-window -t "$SESSION_NAME":3 -n "$three"
    tmux send-keys -t "$three" "$cmd" C-m

    local four='üíé p1'
    tmux new-window -t "$SESSION_NAME":4 -n "$four"
    tmux send-keys -t "$four" "$cmd" C-m

    local five='ü™ù p2'
    tmux new-window -t "$SESSION_NAME":5 -n "$five"
    tmux send-keys -t "$five" "$cmd" C-m

    local six='üß© p3'
    tmux new-window -t "$SESSION_NAME":6 -n "$six"
    tmux send-keys -t "$six" "$cmd" C-m
  fi

  # Attach Session, on the Main window
  tmux a -t "$SESSION_NAME"
}

convert_aiffs() {
  for i in *.aiff;
    do convert_aiff $i;
  done
}

# Convert .aiff files to .ogg
convert_aiff() {
  ffmpeg -hide_banner -loglevel error -y -i "$1" -c:a libvorbis -q:a 4 "_$1.ogg";
}

convert_gifs() {
  for i in *.gif;
    do convert_gif $i;
  done
}

# Convert .gif files to .mp4
convert_gif() {
  ffmpeg -hide_banner -loglevel error -y -f gif -i "$1" -movflags faststart -pix_fmt yuv420p -vf "scale=trunc(iw/2)*2:trunc(ih/2)*2" "_${1.*}.mp4";
}

convert_webms() {
  for i in *.webm;
    do convert_webm $i;
  done
}

# Convert .webm video to .mp4
convert_webm() {
  echo "Converting $1"
  # ffmpeg -fflags +genpts -i "$1" -r 24 "scale=trunc(iw/2)*2:trunc(ih/2)*2" "_${1.*}.mp4"
  ffmpeg -hide_banner -loglevel error -fflags +genpts -i "$1" -vf "pad=ceil(iw/2)*2:ceil(ih/2)*2" -r 24 "${1%.*}.mp4"
}

jpg_to_video() {
  local source_dir=$1
  local framerate=$2
  # name files in directory as 00.jpg 01.jpg 02.jpg etc to order them
  ffmpeg -hide_banner -loglevel error -y -f image2 -r "$framerate" -i "$source_dir/%02d.jpg" -vcodec libx264 -crf 18 -vf "pad=ceil(iw/2)*2:ceil(ih/2)*2" "output.mp4"
}
# jpg_to_video ~/Desktop/xmas 12

# print a shell color test to determine the level of color support
colortest() {
  awk 'BEGIN{
    s="/\\/\\/\\/\\/\\"; s=s s s s s s s s s s s s s s s s s s s s s s s;
    for (colnum = 0; colnum<256; colnum++) {
      r = 255-(colnum*255/255);
      g = (colnum*510/255);
      b = (colnum*255/255);
      if (g>255) g = 510-g;
      printf "\033[48;2;%d;%d;%dm", r,g,b;
      printf "\033[38;2;%d;%d;%dm", 255-r,255-g,255-b;
      printf "%s\033[0m", substr(s,colnum+1,1);
    }
    printf "\n";
  }'
}

rename_files() {
  local old=$1
  local new=$2
  find . -name "*.$old" -exec bash -c 'mv "$1" "${1%.$old}".$new' - '{}' +
}

determine_os() {
  case $(uname | tr '[:upper:]' '[:lower:]') in
    linux*) echo "linux" ;;
    darwin*) echo "mac" ;;
    msys*) echo "windows" ;;
    *) echo "notset" ;;
  esac
}

timestamp_ms() {
  # brew install coreutils for gdate
  echo $(($(gdate +%s%N)/1000))
}

trash() {
  local os=$(determine_os)
  local file
  if [[ "$os" = "mac" ]]; then
    for file in "$@"; do
      local name = "${file}-$(timestamp_ms)"
      mv "${file}" "$HOME/.Trash/${name}" && echo "${file}: Moved to ~/.Trash/${name}"
    done
  elif [[ "$os" = "linux" ]]; then
    for file in "$@"; do
      local name = "${file}-$(timestamp_ms)"
      mv "${file}" "~/.local/share/Trash/${name}" && echo "${file}: Moved to ~/.local/share/Trash/${name}"
    done
  else
    echo "could not determine the system OS. halting."
  fi
}

confirm() {
  # call with a prompt string or use a default
  read -r -p "${1:-Are you sure? [y/N]} " response
  case "$response" in
      [yY][eE][sS]|[yY])
          true
          ;;
      *)
          false
          ;;
  esac
}

# open the neovim log file
nvim_logs() {
  nvim ~/.cache/nvim
}

####################################################
# HUBSPOT
####################################################

# tail the asset bender log file
tail_bend_logs() {
  tail -f ~/.cache/nvim/asset-bender.log
}

# run prettier on all staged files
pretty() {
  bpx hs-prettier --write $(git diff --name-only --cached)
}

# run hs projects with my preferred settings
flexo() {
  cd "$CODE_DIR" &&\
  NODE_OPTIONS="--max_old_space_size=8192"\
  bend reactor serve "$@"\
    --update\
    --ts-watch\
    --run-tests\
    --enable-tools\
    --UNSUPPORTED_LOCAL_DEV_SETTING rspack=true
}

hs_build() {
  if [[ -z "$1" ]]; then
    cd "$CODE_DIR" &&\
    NODE_OPTIONS="--max_old_space_size=8192"\
    return bend reactor build all --update "$1"
  fi
  return bend reactor build all --update .
}

checkVpn() {
  NETWORK_LOCATION=$(dig +short +time=1 client-network-location.hubteam.com TXT)
  if [[ $NETWORK_LOCATION != '"internal"' ]]; then
    echo <<EOF
    ü§†  Howdy! It looks like you're not connected to HubSpot's internal network. This script needs this in order to work.
    Please ensure you're connected to one of the following before proceeding:
    - The wired network in the office
    - The HS-Corp wifi network
    - The VPN (https://hubspot.service-now.com/sp?id=kb_article_view&sys_kb_id=dcea4f963b67c2505da4f547f4e45a47)
EOF
    return 1
  fi

  return 0
}

# bpmi my-package: installs my-package@1
bpmi() {
  command bend bpm install $1@${2:-1} --save-runtime && bend fix-dependencies . --UNSUPPORTED_LOCAL_DEV_SETTING bpm.fix-dependencies
}

update_maven_cache() {
  local current_dir=$(pwd)
  local NUM_PROC=$(python3  -c 'import multiprocessing; print(multiprocessing.cpu_count())')

  if [[ -z $1 ]]; then
    cd "$CODE_DIR"
    # find . -maxdepth 2 -type d -name '.git' | xargs -n 1 stat -f "%m %N" | sort -nr | awk '{print $2}' | xargs -n1 dirname | xargs -P$NUM_PROC -n1 $0
    #find . -maxdepth 2 -type d -name '.git' -printf "%T@ %p\n" | sort -nr | awk '{print $2}' | xargs -n1 dirname | xargs -P$NUM_PROC -n1 $0
    find . -maxdepth 1 -type d -print0 | xargs -P$NUM_PROC -n1 -0 $0
    rm -f /tmp/*.mvn.log
    cd "$current_dir"
    exit 0
  fi

  echo "Pulling deps for $1"

  cd "$1"

  if [[ -e ".git" ]]; then
    if [[ -e "pom.xml" ]]; then
      mvn -U dependency:go-offline &> /tmp/$$.mvn.log
      if [[ $? -ne 0 ]]; then
        echo "Failed "$(basename $(pwd))
      else
        echo "Done with "$(basename $(pwd))
      fi
    fi
  fi
  cd "$current_dir"
}

alias mvnfast="mvn clean test-compile -Pskip-validation -DskipTests  -Dhs-swagger.skip=true"

alias mvndfast="mvnd clean test-compile -Pskip-validation -DskipTests  -Dhs-swagger.skip=true"

